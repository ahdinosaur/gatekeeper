#!/bin/sh
# nongrata
# start/stop script for the nongrata web server

### BEGIN INIT INFO
# Provides:          nongrata
# Required-Start:    $syslog $remote_fs $network
# Required-Stop:     $syslog $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: redis-server
### END INIT INFO

PROGRAM=nongrata
CLJ_HOME=$(dirname $0)
cd $CLJ_HOME/..
CLJ_HOME=$(pwd -P)
LOGFILE=logs/$PROGRAM.log
PIDFILE=logs/$PROGRAM.pid
JAR=
VERSION=
NULL_DEVICE=/dev/null

###############

getversion() {
  if [ -e project.clj ]; then
    VERSION=$(head -1 project.clj | cut -d\" -f2)
    JAR=$PROGRAM-$VERSION.jar
    main=$(awk '/:main/ { print $2;}' project.clj)
  else
    echo "cannot find project.clj"
    exit 1
  fi
}

rejar() {
  echo "Updating the nongrata jar..."
  getversion
  # DEFENSIVE CODING: force clean
  lein clean
  LEIN_SNAPSHOTS_IN_RELEASE=true lein jar
}

start() {
  getversion
  if [ ! -e "$JAR" ]; then
    rejar
    #echo "cannot find jar: $JAR"
    #exit 1
  fi
  if [ ! -d logs ]; then
    mkdir -p logs
  fi
  if [ -e $PIDFILE ]; then
    echo "deleting old $PIDFILE you may need to kill $(cat $PIDFILE)"
    rm $PIDFILE
  fi
  if [ -e $PIDFILE ]; then
    echo "$PIDFILE exists, process is already running or crashed"
  else
    if [ -e $LOGFILE.1 ]; then
      mv $LOGFILE.1 $LOGFILE.2
    fi
    if [ -e $LOGFILE ]; then
      mv $LOGFILE $LOGFILE.1
    fi
    jargs="-Xms128M -Xmx256M"
    # jargs="-Xms256m -Xmx512m"
    jargs="$jargs -Dproject.version=$VERSION"
    jargs="$jargs -Djava.net.preferIPv4Stack=true -Djava.net.preferIPv6Addresses=false"
    # NOTE: use the following when you want to connect with jdb
    # jargs="$jargs -agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=y"
    cp=$(find lib -name '*.jar' -printf "%p:")
    cp="${cp}$JAR"
    clj="(use '$main)(apply -main *command-line-args*)"
    #echo java $jargs -cp "$cp" clojure.main -e "$clj" $NULL_DEVICE $args
    if [ "$cmd" != "run" ]; then
      echo "Starting $PROGRAM..."
      # NOTE: be very careful to close file descriptors
      # see http://www.celinio.net/techblog/?p=1038
      # https://issues.jenkins-ci.org/browse/JENKINS-2729
      # https://wiki.jenkins-ci.org/display/JENKINS/Spawning+processes+from+build
      unset BUILD_ID
      java $jargs -cp "$cp" clojure.main -e "$clj" $NULL_DEVICE $args < /dev/null > $LOGFILE 2>&1 &
      pid=$!
      echo $pid > $PIDFILE
    else
      cmd="java $jargs -cp \"$cp\" clojure.main -e \"$clj\" $NULL_DEVICE $args"
      # echo $cmd
      eval $cmd
    fi
  fi
}

stop() {
  if [ ! -f $PIDFILE ]; then
    echo "$PROGRAM is not running"
  else
    pid=$(cat $PIDFILE)
    echo "Stopping ..."
    kill $pid
    echo "$PROGRAM stopped"
    rm -f $PIDFILE
  fi
}

args="-v"
cmd="$1"
shift
case "$cmd" in
    start)
      start
      ;;
    stop)
      stop
      ;;
    restart)
      stop
      sleep 2
      start
      ;;
    rejar)
      rejar
      ;;
    rerun)
      stop
      rejar
      start
      ;;
    run)
      # args=$*
      args=""
      while [ "$#" -gt 0 ]; do
	args="$args '$1'"
        shift
      done
      start
      ;;
    *)
      echo "Please use start, stop or restart as first argument"
      ;;
esac
